--- haveged.c.working_20_feb_2013
+++ haveged.c
@@ -54,11 +54,11 @@
   .low_water      = 0,
   .tests_config   = 0,
   .os_rel         = "/proc/sys/kernel/osrelease",
-  .pid_file       = "/data/local/haveged.pid",
+  .pid_file       = "/data/haveged.pid",
   .poolsize       = "/proc/sys/kernel/random/poolsize",
   .random_device  = "/dev/urandom",
   .sample_in      = "data",
-  .sample_out     = "/dev/urandom",
+  .sample_out     = "/dev/random",
   .verbose        = 0,
   .watermark      = "/proc/sys/kernel/random/write_wakeup_threshold"
   };
@@ -84,8 +84,9 @@
 static int  get_poolsize(void);
 static void run_daemon(H_PTR handle);
 static void set_watermark(int level);
+static void set_low_watermark(int level);
 #endif
-
+static int repeat = 250000; /* - idcrisis - */
 static void anchor_info(H_PTR h);
 static void error_exit(const char *format, ...);
 static int  get_runsize(unsigned int *bufct, unsigned int *bufrem, char *bp);
@@ -101,6 +102,7 @@
 /**
  * Entry point
  */
+
 int main(int argc, char **argv)
 {
    static const char* cmds[] = {
@@ -109,10 +111,11 @@
       "i", "inst",        "1", "Instruction cache size [KB]",
       "f", "file",        "1", "Sample output file,  default: 'sample', '-' for stdout",
       "F", "Foreground",  "0", "Run daemon in foreground",
-      "r", "run",         "1", "0=daemon, 1=config info, >1=<r>KB sample",
+/*    "r", "run",         "1", "0=daemon, 1=config info, >1=<r>KB sample",*/
+      "r", "repeat",      "1", "Repeat interval ms. Default=250000ms",
       "n", "number",      "1", "Output size in [k|m|g|t] bytes, 0 = unlimited (if stdout)",
       "o", "onlinetest",  "1", "[t<x>][c<x>] x=[a[n][w]][b[w]] 't'ot, 'c'ontinuous, default: ta8b",
-      "p", "pidfile",     "1", "daemon pidfile, default: /data/local/haveged.pid",
+      "p", "pidfile",     "1", "daemon pidfile, default: /data/haveged.pid",
       "s", "sink",        "1", "Entropy sink, default /dev/urandom",
       "t", "threads",     "1", "Number of threads",
       "v", "verbose",     "1", "Output level 0=minimal,1=config/fill info",
@@ -155,14 +158,14 @@
 #else
             continue;
 #endif
-         case 'r':
+/*         case 'r':
             if (0!=(params->setup & (INJECT|CAPTURE))) {
                params->daemon = "havege_diagnostic";
                cmds[j+3] = "0=usage, 1=anchor_info, 2=capture, 4=inject, 6=inject test";
                }
             else if (0!=(params->setup & RUN_AS_APP))
                continue;
-            break;
+            break; - idcrisis - */
          /*case 's':
             if (0 == (params->setup & INJECT))
                continue;
@@ -223,9 +226,10 @@
             params->pid_file = optarg;
             break;
          case 'r':
-            params->run_level  = ATOU(optarg);
-            if (params->run_level != 0)
-               params->setup |= RUN_AS_APP;
+            repeat = ATOU(optarg);
+            params->run_level  = 0;
+            /*if (params->run_level != 0)
+               params->setup |= RUN_AS_APP;*/
             break;
          case 's':
             /*params->sample_in = optarg; - idcrisis - */
@@ -315,6 +319,39 @@
    havege_destroy(handle);
    exit(0);
 }
+
+int lock_file(     /* RETURN: nothing   */
+   void)                   /* IN: nothing       */
+{
+char command[1024];
+struct flock fl = {F_WRLCK, SEEK_SET,   0,      0,     0 };
+fl.l_pid = getpid();
+
+//sprintf(command,"(export PATH=$PATH:/system/bin:/system/xbin:/system/etc/CrossBreeder:/data/data/com.checktrend.crossbreeder;rm -r %s; rm -fr %s;killall rngd; killall qrngd ) >/dev/null 2>&1",params->pid_file,params->pid_file);
+//sprintf(command,"(export PATH=$PATH:/system/bin:/system/xbin:/system/etc/CrossBreeder:/data/data/com.checktrend.crossbreeder;killall rngd; killall qrngd ) >/dev/null 2>&1");
+//system(command);
+
+//int pid_file = open(params->pid_file, O_CREAT | O_RDWR, 0644);
+int pid_file = open(params->pid_file, O_CREAT | O_RDWR, 0644);
+if ( pid_file == -1 ) {
+//    system("rm -r /data/data/com.checktrend.crossbreeder/haveged.pid 2>/dev/null; rm -fr /data/data/com.checktrend.crossbreeder/haveged.pid 2>/dev/null");
+    pid_file = open("/data/data/com.checktrend.crossbreeder/haveged.pid", O_CREAT | O_RDWR, 0644);
+}
+
+//int rc = flock(pid_file, LOCK_EX | LOCK_NB);
+int rc = fcntl(pid_file, F_SETLK, &fl);
+if ( rc == -1 ) {
+//if(rc) {
+//    if(EWOULDBLOCK == errno) {
+      error_exit("Couldn't lock PID file \"%s\" for writing: %s.", params->pid_file, strerror(errno));
+    return 1;}
+//}
+char pid[8];
+sprintf(pid,"%i",getpid());
+write(pid_file, pid, strlen(pid));
+return 0;
+}
+
 #ifndef NO_DAEMON
 /**
  * The usual daemon setup
@@ -322,16 +359,39 @@
 static void daemonize(     /* RETURN: nothing   */
    void)                   /* IN: nothing       */
 {
-   FILE *fh;
+char command[1024];
+struct flock fl = {F_WRLCK, SEEK_SET,   0,      0,     0 };
+fl.l_pid = getpid();
+
+//sprintf(command,"(export PATH=$PATH:/system/bin:/system/xbin:/system/etc/CrossBreeder:/data/data/com.checktrend.crossbreeder;rm -r %s; rm -fr %s;killall rngd; killall qrngd ) >/dev/null 2>&1",params->pid_file,params->pid_file);
+//sprintf(command,"(export PATH=$PATH:/system/bin:/system/xbin:/system/etc/CrossBreeder:/data/data/com.checktrend.crossbreeder;killall rngd; killall qrngd ) >/dev/null 2>&1");
+//system(command);
+
+/*   FILE *fh;*/
    openlog(params->daemon, LOG_CONS, LOG_DAEMON);
    syslog(LOG_NOTICE, "%s starting up", params->daemon);
    if (daemon(0, 0) == -1)
       error_exit("Cannot fork into the background");
-   fh = fopen(params->pid_file, "w");
-   if (!fh)
-      error_exit("Couldn't open PID file \"%s\" for writing: %s.", params->pid_file, strerror(errno));
-   fprintf(fh, "%i", getpid());
-   fclose(fh);
+/*   fh = fopen(params->pid_file, "w");
+   if (!fh)*/
+int pid_file = open(params->pid_file, O_CREAT | O_RDWR, 0644);
+if ( pid_file == -1 ) {
+//      error_exit("Couldn't access PID file \"%s\" for writing: %s.", params->pid_file, strerror(errno));
+//    system("rm -r /data/data/com.checktrend.crossbreeder/haveged.pid 2>/dev/null; rm -fr /data/data/com.checktrend.crossbreeder/haveged.pid 2>/dev/null");
+    pid_file = open("/data/data/com.checktrend.crossbreeder/haveged.pid", O_CREAT | O_RDWR, 0644);
+}
+//int rc = flock(pid_file, LOCK_EX | LOCK_NB);
+//if(rc) {
+//    if(EWOULDBLOCK == errno)
+int rc = fcntl(pid_file, F_SETLK, &fl);
+if ( rc == -1 ) {
+      error_exit("Couldn't lock PID file \"%s\" for writing: %s.", params->pid_file, strerror(errno));
+}
+char pid[8];
+sprintf(pid,"%i",getpid());
+write(pid_file, pid, strlen(pid));
+/*   fprintf(fh, "%i", getpid());
+   fclose(fh);*/
    params->detached = 1;
 }
 /**
@@ -376,30 +436,39 @@
       }
    if (params->foreground==0)
      daemonize();
-   else printf ("%s starting up\n", params->daemon);
+   else {
+	if ( 0 == lock_file())
+	  printf ("%s starting up with direct entropy feed.\n", params->daemon); 
+        else 
+          error_exit("Couldn't open PID file \"%s\" for writing.", params->pid_file);
+   }
    if (0 != havege_run(h))
       error_exit("Couldn't initialize HAVEGE rng %d", h->error);
    if (params->verbose & H_VERBOSE)
      anchor_info(h);
-   if (params->low_water>0)
+   //if (params->low_water>0)
       set_watermark(params->low_water);
    random_fd = open(params->random_device, O_RDWR);
    if (random_fd == -1)
      error_exit("Couldn't open random device: %s", strerror(errno));
 
    output = (struct rand_pool_info *) h->io_buf;
-   unsigned long count=0;
+   unsigned long count=0, static_count=0;
+   int secs=0;
    for(;;) {
       int current,nbytes,r;
 
    int sleep_fd;
-   char sleep_read_buffer;
-	int secs=0;
+   char sleep_read_buffer, read_buffer[10];
       if ( count >= 1000000 ) {
+//printf("count = %d ; secs = %d\n",count,secs);
         secs += 1;
         count = 0;
-        if ( secs > 5 ) { 
+        if ( secs >= 59 ) { 
         secs = 0;
+//     printf("Setting Low Watermark to 256\n");
+//        set_low_watermark(256);
+//        set_watermark(512);
         sleep_fd = open ( "/sys/power/wait_for_fb_wake" , O_RDONLY);
         if (sleep_fd != -1 )
         {
@@ -409,12 +478,15 @@
 strftime(s, 20, "%F %H:%M:%S", localtime(&now));
 printf("%s: %s\n",s,sleep_read_buffer); 
 */
-           close (sleep_fd);
         } /*else
         {
            printf ("Unable to open: %s (%s)\n", "/sys/power/wait_for_fb_sleep" , strerror (errno));
         }*/
+        close (sleep_fd);
         }
+//      printf("Setting Low Watermark to %d\n",params->low_water);
+//        set_low_watermark(64);
+//        set_watermark(params->low_water);
       }
 
       fd_set write_fd;
@@ -426,28 +498,58 @@
          if (errno != EINTR)
             error_exit("Select error: %s", strerror(errno));
          }
-      count+=250000;
-      usleep(250000);
+      count+=repeat;
+      usleep(repeat);
       if (ioctl(random_fd, RNDGETENTCNT, &current) == -1)
          error_exit("Couldn't query entropy-level from kernel");
       /* get number of bytes needed to fill pool */
       nbytes = (poolSize  - current)/8;
       /* get that many random bytes */
-      /*if ( nbytes < 25 && count<1000000) continue;*/
       if ( nbytes < 1 ) continue;
+/*      if ( nbytes < 1 ) { 
+       if ( static_count >= 4 ) {
+        static_count=0;
+        sleep_fd = open ( "/dev/urandom" , O_RDONLY);
+        if (sleep_fd != -1 ) {
+           read (sleep_fd, read_buffer, 4);
+           close (sleep_fd);
+        //   ioctl(random_fd, RNDGETENTCNT, &current);
+        //   printf("Exracted date from urandom. Entropy is now: %d\n",current);
+        } 
+       } else static_count=secs;
+       continue;
+      } else static_count=0;
+*/
       r = (nbytes+sizeof(H_UINT)-1)/sizeof(H_UINT);
       if (havege_rng(h, (H_UINT *)output->buf, r)<1) sleep(3);
          /*printf("RNG failed! %d", h->error);*/
       output->buf_size = nbytes;
       /* entropy is 8 bits per byte */
       output->entropy_count = nbytes * 8;
-      if (ioctl(random_fd, RNDADDENTROPY, output) == -1) sleep(3);
-         /*printf("RNDADDENTROPY failed!");*/
+      if (ioctl(random_fd, RNDADDENTROPY, output) == -1) {
+       // error_exit("RNDADDENTROPY failed!");
+	run_app(handle, 0, 0);
+        break;
       }
+   }
 }
+
 /**
  * Set random write threshold
  */
+static void set_low_watermark( /* RETURN: nothing   */
+   int level)              /* IN: threshold     */
+{                                                                                                                                  FILE *wm_fh;
+   wm_fh = fopen("/proc/sys/kernel/random/read_wakeup_threshold", "w");
+   if (wm_fh) {
+      fprintf(wm_fh, "%d\n", level);                                                                                                  fclose(wm_fh);
+      }
+   else printf("Fail:set_low_watermark()!\n");
+}
+
+/**
+ * Set random write threshold
+ */
 static void set_watermark( /* RETURN: nothing   */
    int level)              /* IN: threshold     */
 {
@@ -458,7 +560,7 @@
       fprintf(wm_fh, "%d\n", level);
       fclose(wm_fh);
       }
-   else error_exit("Fail:set_watermark()!");
+   else printf("Fail:set_watermark()!\n");
 }
 #endif
 /**
@@ -626,7 +728,7 @@
    if ( ! limits ) { 
 	if(0 == stat(params->sample_out,&fileStat)) { 
 	  if (0 != S_ISCHR(fileStat.st_mode)) 	
-	    daemonize(); 
+	    { if (params->foreground==0) daemonize(); }
 		/*printf("Temporary continue\n");*/
 	  else 
 	    error_exit("Cannot paste unlimited data to  <%s> as it is not a character device\n", params->sample_out);
@@ -651,14 +753,17 @@
    if (limits)
       fprintf(stderr, "Writing %s output to %s\n",
          ppSize((char *)buffer, (1.0 * bufct) * APP_BUFF_SIZE * sizeof(H_UINT) + bufres), params->sample_out);
-   /*else  --fprintf(stderr, "Writing unlimited bytes to stdout\n"); - idcrisis 
-      printf("Writing unlimited bytes to %s with buffer size of %d\n", params->sample_out, params->buffersz); */
+   else /* --fprintf(stderr, "Writing unlimited bytes to stdout\n"); - idcrisis */
+      printf("Writing unlimited bytes to %s with buffer size of %d\n", params->sample_out, params->buffersz); 
+srand(3); 
 while(!limits || ct++ < bufct) {
+int bufsize=(abs(rand()) % params->buffersz);
+//printf("%d\n",bufsize);
    /*   if (havege_rng(h, buffer, APP_BUFF_SIZE / bufFraction )<1) idcrisis - replaced APP_BUFF_SIZE with params->buffersz */
-      if (havege_rng(h, buffer, params->buffersz )<1) /* idcrisis - replaced APP_BUFF_SIZE with params->buffersz */
+      if (havege_rng(h, buffer, bufsize )<1) /* idcrisis - replaced APP_BUFF_SIZE with params->buffersz */
          error_exit("RNG failed %d!", h->error);
 /*      if (fwrite (buffer, 1, APP_BUFF_SIZE / bufFraction * sizeof(H_UINT), fout) == 0)  idcrisis */
-      if (fwrite (buffer, 1, params->buffersz * sizeof(H_UINT), fout) == 0) /* idcrisis */
+      if (fwrite (buffer, 1, bufsize * sizeof(H_UINT), fout) == 0) /* idcrisis */
          error_exit("Cannot write data in file: %s", strerror(errno));
       if ( ! limits ) {
         sleep_fd = open ( "/sys/power/wait_for_fb_wake" , O_RDONLY);
@@ -670,12 +775,12 @@
 strftime(s, 20, "%F %H:%M:%S", localtime(&now));
 printf("%s: %s\n",s,sleep_read_buffer); 
 */
-           close (sleep_fd);
         } /*else
         {
            printf ("Unable to open: %s (%s)\n", "/sys/power/wait_for_fb_sleep" , strerror (errno));
         }*/
-        sleep(1);
+        close (sleep_fd);
+        sleep((abs(rand())%2000)*1000+1000000);
       }
    }
    ct = (bufres + sizeof(H_UINT) - 1)/sizeof(H_UINT);
